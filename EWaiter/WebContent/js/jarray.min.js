(function (e) { function r(e, t) { return e - t } var t = function () { this.datas = [] }, n = t.prototype; n.size = function () { return this.datas.length }, n.isEmpty = function () { return this.size() === 0 }, n.contains = function (e) { return this.datas.indexOf(e) !== -1 }, n.indexOf = function (e) { for (var t in this.datas) if (this.datas[t] === e) return t; return -1 }, n.lastIndexOf = function (e) { for (var t = this.size(); t >= 0; t--) if (this.datas[t] === e) return t }, n.toArray = function () { return this.datas }, n.outOfBound = function (e) { return e < 0 || e > this.size() - 1 }, n.get = function (e) { return this.outOfBound(e) ? null : this.datas[e] }, n.set = function (e, t) { this.datas[e] = t }, n.add = function (e) { this.datas.push(e) }, n.insert = function (e, t) { if (this.outOfBound(e)) return; this.datas.splice(e, 0, t) }, n.remove = function (e) { return this.outOfBound(e) ? !1 : (this.datas.splice(e, 1), !0) }, n.removeValue = function (e) { return this.contains(e) ? (this.remove(this.indexOf(e)), !0) : !1 }, n.clear = function () { this.datas.splice(0, this.size()) }, n.addAll = function (e) { if (!e instanceof t) return !1; for (var n in e.datas) this.add(e.get(n)); return !0 }, n.insertAll = function (e, n) { if (this.outOfBound(e)) return !1; if (!n instanceof t) return !1; var r = e; for (var e in n.datas) this.insert(r++, n.get(e)); return !0 }, n.sort = function (e) { if (e) { this.datas.sort(r); return } this.datas.sort() }, n.toString = function () { return "[" + this.datas.join() + "]" }, n.valueOf = function () { return this.toString() }, e.ArrayList = t })(window)